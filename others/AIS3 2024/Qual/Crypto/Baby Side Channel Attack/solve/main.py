# %%

from sage.all import *
from sage.rings.integer import Integer

from Crypto.Util.number import long_to_bytes

# %%


def parse_file(fname='./src/trace.txt'):

    content = open(fname).read()

    num = []
    value = ""
    last_bit = 0

    for l in content.splitlines():
        # print(l)

        if "funcname: powmod" in l:
            # reset
            value = ""
            last_bit = 0

        if "chall.py(9):" in l:
            # is one
            last_bit = 1

        if "chall.py(10):" in l:
            # append
            # value += str(last_bit)
            value = str(last_bit) + value
            last_bit = 0

        if "chall.py(12):" in l:
            # append
            num.append(value)

    assert (num[0] == num[3])
    assert (num[1] == num[2])

    e = Integer(num[0], 2)
    d = Integer(num[1], 2)

    return e, d


def powmod(a, b, c):
    r = 1
    while b > 0:
        if b & 1:
            r = r * a % c
        a = a * a % c
        b >>= 1
    return r


# %%

e, d = parse_file()

print(f"{e = }")
print(f"{d = }")
print()

c = Integer(
    311008055662105141643141745770106563652946234360553060157384214312317958667707514014696602197881643000644367254873218297799138115412093265957771210559085125069588601683134604092203637179267240386629742451256467948067860312431877257323792060983253357959178469717558308385648730118215234096740670370243480653371135050157192320613896598613489487086718163517894140632871622522263088557254041528112684075349016108455334362561151288459902483930638503701519489411820160090201239194930623665719829272190628146894860356886727064676203026247849606809998622540023969601800332398412433595348347983812154316833464528541401943381
)
ed = Integer(
    8223369991326159999721541362415936978572702728729192221162670073748018475796504699528062698167030957737473967090349101340618573806387371506634508009804909594296061816064015431822943480316088738878907127505831583120852910740783697139012397064412446791449953758684784001804931038894991687611444557796884580674908351528536904803238948240535898110028441635207145365662549504574054262533320351675712607900093851944763604860688442185364375914345244794885402814654250509553143891429541850906018689881129153041039966633637136035355545134678488701060802296483460758651122880911606747367754097626800873356917242850964294401697
)
de = Integer(
    4983656095986542175081374136677175716908524344150058074839980206877919380718709226904488563973122627020409602079285720882945190380720982412073907354434550216745311047033605197907982770916092710455904034920621339208160518309371353516932329726702215750471854139056141039065256667068257865644959070620770617006165761555006366898472537056401395519486317817331700366010823941495569482494978684773473501275475286272842335886689512472284865831759067886248720330647000190990068404098454894045940177322872399300005208894994829783550944400467884585881896906073636595207094060678168069059682352652875495376142284989081872914741
)

print(f"{c = }")
print(f"{ed = }")
print(f"{de = }")
print()

de_n = pow(d, e) - de

print(f"{de_n = }")
print()

ede_n = pow(ed, e) - e

print(f"{ede_n = }")
print()

n = GCD(de_n, ede_n)

print(f"{n = }")
print()

m = pow(c, d, n)

print(f"{m = }")
print(f"{long_to_bytes(m) = }")
print()

# AIS3{S1de_ChaNn3L_1$_3@$y_wh3n_THe_DAtA_l34k4G3_1S_3xaCT}
