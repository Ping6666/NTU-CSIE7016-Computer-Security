# %%

from sage.all import *
from sage.rings.integer import Integer
# from sage.crypto.util import ascii_integer

from Crypto.Util.number import bytes_to_long, long_to_bytes

# %%


def parse_file(fname='./src/trace.txt'):

    content = open(fname).read()

    num = []
    value = ""
    last_bit = 0

    for l in content.splitlines():
        # print(l)

        if "funcname: powmod" in l:
            # reset
            value = ""
            last_bit = 0

        if "chall.py(9):" in l:
            # is one
            last_bit = 1

        if "chall.py(10):" in l:
            # append
            value += str(last_bit)
            last_bit = 0

        if "chall.py(12):" in l:
            # append
            num.append(value)

    assert (num[0] == num[3])
    assert (num[1] == num[2])

    e = Integer(num[0], 2)
    d = Integer(num[1], 2)

    return e, d


def powmod(a, b, c):
    r = 1
    while b > 0:
        if b & 1:
            r = r * a % c
        a = a * a % c
        b >>= 1
    return r


# def pow(a, b):
#     r = 1
#     while b > 0:
#         if b & 1:
#             r = r * a
#         a = a * a
#         b >>= 1
#     return r

# %%

e, d = parse_file()

print(f"{e = }")
print(f"{d = }")
print()

c = Integer(
    311008055662105141643141745770106563652946234360553060157384214312317958667707514014696602197881643000644367254873218297799138115412093265957771210559085125069588601683134604092203637179267240386629742451256467948067860312431877257323792060983253357959178469717558308385648730118215234096740670370243480653371135050157192320613896598613489487086718163517894140632871622522263088557254041528112684075349016108455334362561151288459902483930638503701519489411820160090201239194930623665719829272190628146894860356886727064676203026247849606809998622540023969601800332398412433595348347983812154316833464528541401943381
)
ed = Integer(
    8223369991326159999721541362415936978572702728729192221162670073748018475796504699528062698167030957737473967090349101340618573806387371506634508009804909594296061816064015431822943480316088738878907127505831583120852910740783697139012397064412446791449953758684784001804931038894991687611444557796884580674908351528536904803238948240535898110028441635207145365662549504574054262533320351675712607900093851944763604860688442185364375914345244794885402814654250509553143891429541850906018689881129153041039966633637136035355545134678488701060802296483460758651122880911606747367754097626800873356917242850964294401697
)
de = Integer(
    4983656095986542175081374136677175716908524344150058074839980206877919380718709226904488563973122627020409602079285720882945190380720982412073907354434550216745311047033605197907982770916092710455904034920621339208160518309371353516932329726702215750471854139056141039065256667068257865644959070620770617006165761555006366898472537056401395519486317817331700366010823941495569482494978684773473501275475286272842335886689512472284865831759067886248720330647000190990068404098454894045940177322872399300005208894994829783550944400467884585881896906073636595207094060678168069059682352652875495376142284989081872914741
)

print(f"{c = }")
print(f"{ed = }")
print(f"{de = }")
print()

# # # ed_no_mod = pow(e, d)
# de_no_mod = pow(d, e)

# # # print(f"{ed_no_mod = }")
# print(f"{de_no_mod = }")
# print()

# de_can_div = de_no_mod - de

# print(f"{de_can_div = }")
# print()

big_phi = (e * d) - 1
f_big_phi = big_phi.factor()

print(f"{big_phi = }")
print()

print(f"{f_big_phi = }")
print()

# big_n = 9628731901169803115881048832967362133030409059885141291548305692471703098107018161234627067990112452684636340605480941747373889935774313632015350578113293449337523612025446956968653327547899746743892613269823702962675218248598352350363535806549909643918193070433305015848658404225198315080062874516638914904329581215758646233716561602930742993938861279981303854178419154046054923161110076521096278676815102619363704858205291135053090349672630332655601309159742508895126230257100188498669218991271328843234775272842712401349432975559103747697654961057479122181723060721149819313682126531947835308650703623155868111651600

# %%

# # a = GCD(de_no_mod, big_n)
# a = GCD(de_can_div, big_n)

# print(f"{a = }")
# print()

# %%

# de_div = de % big_n
# ed_div = ed % big_n

# print(f"{de_div = }")
# print(f"{ed_div = }")
# print()

# _gcd = GCD(de_div, ed_div)

# print(f"{_gcd = }")
# print()

# a = big_n % de_div
# b = big_n % ed_div

# print(f"{a = }")
# print(f"{b = }")
# print()

# %%

# for i in range(1, 1000000000):
#     if big_n % i == 0:
#         _n = big_n // i

#         a = powmod(c, d, _n)
#         _a = long_to_bytes(a)

#         if b"AIS3" in _a or b"ais3" in _a:
#             print(f"{_a = }")
#             input()

# %%

# a = powmod(c, d, big_n)

# # print(f"{long_to_bytes(a) = }")
# print(f"{a = }")
# print()

# for i in range(1, 10000):
#     if a % i == 0:
#         _a = a // i
#         __a = long_to_bytes(_a)

#         # if b"AIS3" in __a or b"ais3" in __a:
#         print(f"{__a = }")
#         input()

# %%

# f = eedd_can_div.factor()

# print(f"{f = }")
# print()

# n = GCD(e, d)

# print(f"{n = }")

# print(n.is_prime())
